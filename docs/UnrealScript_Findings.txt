This is a document detailing any findings regarding unknown UnrealScript
opcode definitions and quirks with our current method of serializing
bytecode. Many opcode definitions can be found in the UT-Package-File-Format
pdf, but not all are defined. It is important to understand all of them 
so as to properly load all Unreal Engine 1 content.

---------------------------------------------------------------------
Bugs/Misunderstandings
---------------------------------------------------------------------
- EX_IntConstByte inconsistency with documentation
  Description:
    The package file format pdf says that a TOKEN follows when reading an
    EX_IntConstByte. Upon inspection of DeusEx Core::Object::Sprintf and
    testing done on 227j, it appears that a byte follows and not a TOKEN.
  Solution:
    Read a byte instead of a token

- EX_Context: strange 3 bytes after object reference
  Description:
    EX_Context seems to be a bytecode that is used to tell the scripting
    environment what object is being referred to in the following.

    For example, if I wanted to refer to "Location", then I just need an
    EX_InstanceVariable followed by the ObjRef for Location. but if I wanted
    to refer to Location of another actor "Incoming.Location", then this
    EX_Context bytecode is necesary.

    The first byte (maybe its a CINDEX?) seems to describe the amount of bytes
    that follow. This is likely to determine how long the "Context" is set to
    the particular object in question.

    There are two bytes that seem to follow after. Upon analyzing
    "NavigationPoint.Accept", it appears to be "0x00" and "0x04" 
    each time. It is currently unknown what this is for.

  Solution:
    Read a byte (or cindex??) after getting EX_Context
    Read a word after that

---------------------------------------------------------------------
Unknown Opcodes
---------------------------------------------------------------------
N/A
