This is a document detailing any findings regarding unknown UnrealScript
opcode definitions and quirks with our current method of serializing
bytecode. Many opcode definitions can be found in the UT-Package-File-Format
pdf, but not all are defined. It is important to understand all of them 
so as to properly load all Unreal Engine 1 content.

---------------------------------------------------------------------
Bugs/Misunderstandings
---------------------------------------------------------------------
- EX_IntConstByte inconsistency with documentation
  Description:
    The package file format pdf says that a TOKEN follows when reading an
    EX_IntConstByte. Upon inspection of DeusEx Core::Object::Sprintf and
    testing done on 227j, it appears that a byte follows and not a TOKEN.
  Solution:
    Read a byte instead of a token

- EX_ClassContext inconsistency with documentation
  Description:
    The package file format pdf says that an INDEX is used for the first
    and last parts of the ClassContext token. However, parsing the token in
    this way will lead to a crash. Upon manual inspection, it appears that
    a TOKEN is used instead of an INDEX, which leads to a consistent results
    when compared with UTPT's disassembly.
  Solution:
    EX_ClassContext is:
      TOKEN
      WORD
      BYTE
      TOKEN

- EX_Context
  Description:
    EX_Context is not described in the UT-Package-File-Format document.
    However, it appears to function the same as EX_ClassContext.
  Solution:
    EX_Context is:
      TOKEN
      WORD
      BYTE
      TOKEN

- EX_LetBool (0x14) on Package Version 61
  Description:
    EX_LetBool appears at the beginning of every function on package
    version 61. It appears that this bytecode is treated as a "begin
    function" indicator with variable data afterwards. This data seems
    to come in pairs of bytes where the first byte is non-zero and the
    second byte is usually zero. If the first byte is zero, then the data
    appears to end.
  Solution:
    Treat EX_LetBool as "EX_StartFunction", read pairs of bytes until
    the first byte in a pair is zero.

---------------------------------------------------------------------
Unknown Opcodes
---------------------------------------------------------------------
- 0x5a: EX_StringToName2
  Description:
    This is exactly the same as EX_StringToName, but for some reason it
    has a duplicate opcode. 
    
    First seen in "Brother Bear" in "Actor.StringToAnimName" at "0x6fbbf"

- 0x15: EX_EndFunction
  Description:
    The end of a function. Only appears on package version 61

- 0x2b: EX_CastStringSize
  Description:
    This appears to be used where string concatenation is seen in scripts for
    package version 61 (Engine.Pawn.PlayGutHit for example). The package file
    format pdf describes this as a sort of type cast.

    Strings in old versions of Unreal are declared as such:
    intrinsic(231) final static function Log( coerce string[240] S, optional name Tag );
    intrinsic(228) static final operator(40) string[255] $  ( coerce string[255] A, coerce String[255] B );
    intrinsic(197) static final operator(24) bool        <  ( string[255] A, string[255] B );
    intrinsic(198) static final operator(24) bool        >  ( string[255] A, string[255] B );

    That is, the size of the string MUST be specified before declaring it,
    rather than being treated as a dynamically modifiable string.
    EX_CastStringSize takes a string of one length and casts it to a string of
    another length

