This is a document detailing any findings regarding unknown UnrealScript
opcode definitions and quirks with our current method of serializing
bytecode. Many opcode definitions can be found in the UT-Package-File-Format
pdf, but not all are defined. It is important to understand all of them 
so as to properly load all Unreal Engine 1 content.

---------------------------------------------------------------------
Bugs/Misunderstandings
---------------------------------------------------------------------
- EX_IntConstByte inconsistency with documentation
  Description:
    The package file format pdf says that a TOKEN follows when reading an
    EX_IntConstByte. Upon inspection of DeusEx Core::Object::Sprintf and
    testing done on 227j, it appears that a byte follows and not a TOKEN.
  Solution:
    Read a byte instead of a token

- EX_ClassContext inconsistency with documentation
  Description:
    The package file format pdf says that an INDEX is used for the first
    and last parts of the ClassContext token. However, parsing the token in
    this way will lead to a crash. Upon manual inspection, it appears that
    a TOKEN is used instead of an INDEX, which leads to a consistent results
    when compared with UTPT's disassembly.
  Solution:
    EX_ClassContext is:
      TOKEN
      WORD
      BYTE
      TOKEN

- EX_Context
  Description:
    EX_Context is not described in the UT-Package-File-Format document.
    However, it appears to function the same as EX_ClassContext.
  Solution:
    EX_Context is:
      TOKEN
      WORD
      BYTE
      TOKEN

---------------------------------------------------------------------
Unknown Opcodes
---------------------------------------------------------------------
- 0x5a: EX_StringToName2
  Description:
    This is exactly the same as EX_StringToName, but for some reason it
    has a duplicate opcode. 
    
    First seen in "Brother Bear" in "Actor.StringToAnimName" at "0x6fbbf"
