#!/bin/sh

#################################################
# Globals
#################################################
BUILD_DEBUG=0
BUILD_SYMBOLS=0
BUILD_32BIT=0
BUILD_LIBX11_PATH=""
BUILD_LIBX11_HEADER_PATH=""
BUILD_LIBDUMB2_PATH=""
BUILD_LIBDUMB2_HEADER_PATH=""
BUILD_LIBGME_PATH=""
BUILD_LIBGME_HEADER_PATH=""
BUILD_LIBOGG_PATH=""
BUILD_LIBOGG_HEADER_PATH=""
BUILD_LIBVORBIS_PATH=""
BUILD_LIBVORBIS_HEADER_PATH=""
BUILD_LIBMPG123_PATH=""
BUILD_LIBMPG123_HEADER_PATH=""
BUILD_VERBOSE=0
BUILD_COMPILER="g++"
BUILD_INSTALL_PATH="/usr"

#################################################
# Functions
#################################################
print_help()
{
  echo
  echo "libunr configure script"
  echo "Usage: ./configure [options]"
  echo
  echo "Options:"
  echo "   -h  Show this help"
  echo "   -d  Configure makefile with debug symbols and no optimization"
  echo "   -s  Configure makefile with debug symbols"
  echo "   -m  Configure makefile with 32-bit"
  echo "   -v  Configure makefile with verbose output"
  echo "   ( Linking and Header pathing options available in the future"
  echo
}

#################################################
# Main
#################################################
OPTIND=1
while getopts "hdsc:vi:t:u:m" opt; do
  case "$opt" in
  h) print_help; exit 0 ;;
  d) BUILD_DEBUG=1 ;;
  s) BUILD_SYMBOLS=1 ;;
  m) BUILD_32BIT=1 ;;
  v) BUILD_VERBOSE=1 ;;
  esac
done

#################################################
# Default Arguments init
#################################################

if [ -z "$BUILD_LIBX11_PATH" ]
then
  if [ $BUILD_DEBUG -eq 1 ]
    then
      BUILD_LIBDUMB2="-lX11"
    else
      BUILD_LIBDUMB2="-lX11"
    fi
else
  BUILD_LIBX11=$BUILD_LIBX11_PATH
fi

if [ -z "$BUILD_LIBDUMB2_PATH" ]
then
  if [ $BUILD_DEBUG -eq 1 ]
    then
      BUILD_LIBDUMB2="-ldumbd"
    else
      BUILD_LIBDUMB2="-ldumb"
    fi
else
  BUILD_LIBDUMB2=$BUILD_LIBDUMB2_PATH
fi

if [ -z "$BUILD_LIBGME_PATH" ]
then
  if [ $BUILD_DEBUG -eq 1 ]
    then
      BUILD_LIBGME="-lgme"
    else
      BUILD_LIBGME="-lgme"
    fi
else
  BUILD_LIBGME=$BUILD_LIBGME_PATH
fi

if [ -z "$BUILD_LIBOGG_PATH" ]
then
  if [ $BUILD_DEBUG -eq 1 ]
    then
      BUILD_LIBOGG="-logg"
    else
      BUILD_LIBOGG="-logg"
    fi
else
  BUILD_LIBOGG=$BUILD_LIBOGG_PATH
fi

if [ -z "$BUILD_LIBVORBIS_PATH" ]
then
  if [ $BUILD_DEBUG -eq 1 ]
    then
      BUILD_LIBVORBIS="-lvorbis"
    else
      BUILD_LIBVORBIS="-lvorbis"
    fi
else
  BUILD_LIBVORBIS=$BUILD_LIBVORBIS_PATH
fi

if [ -z "$BUILD_LIBMPG123_PATH" ]
then
  if [ $BUILD_DEBUG -eq 1 ]
    then
      BUILD_LIBMPG123="-lmpg123"
    else
      BUILD_LIBMPG123="-lmpg123"
    fi
else
  BUILD_LIBMPG123=$BUILD_LIBMPG123_PATH
fi

# Print build state
echo "--------------------------------------------------------------"
echo "Environment settings:"
echo "--------------------------------------------------------------"
echo "BUILD_DEBUG="$BUILD_DEBUG
echo "BUILD_SYMBOLS="$BUILD_SYMBOLS
echo "BUILD_32BIT="$BUILD_32BIT
echo "BUILD_VERBOSE="$BUILD_VERBOSE
echo "BUILD_COMPILER="$BUILD_COMPILER
echo "BUILD_LIBX11="$BUILD_LIBX11
echo "BUILD_LIBX11_HEADER_PATH="$BUILD_LIBX11_HEADER_PATH
echo "BUILD_LIBDUMB2="$BUILD_LIBDUMB2
echo "BUILD_LIBDUMB2_HEADER_PATH="$BUILD_LIBDUMB2_HEADER_PATH
echo "BUILD_LIBGME="$BUILD_LIBGME
echo "BUILD_LIBGME_HEADER_PATH="$BUILD_LIBGME_HEADER_PATH
echo "BUILD_LIBOGG="$BUILD_LIBOGG
echo "BUILD_LIBOGG_HEADER_PATH="$BUILD_LIBOGG_HEADER_PATH
echo "BUILD_LIBVORBIS="$BUILD_LIBVORBIS
echo "BUILD_LIBVORBIS_HEADER_PATH="$BUILD_LIBVORBIS_HEADER_PATH
echo "BUILD_LIBMPG123="$BUILD_LIBMPG123
echo "BUILD_LIBMPG123_HEADER_PATH="$BUILD_LIBMPG123_HEADER_PATH

BUILD_SETTINGS=\
"$BUILD_LIBX11 -I$BUILD_LIBX11_HEADER_PATH \
$BUILD_LIBDUMB2 -I$BUILD_LIBDUMB2_HEADER_PATH \
$BUILD_LIBGME -I$BUILD_LIBGME_HEADER_PATH \
$BUILD_LIBOGG -I$BUILD_LIBOGG_HEADER_PATH \
$BUILD_LIBVORBIS -I$BUILD_LIBVORBIS_HEADER_PATH \
$BUILD_LIBMPG123 -I$BUILD_LIBMPG123_HEADER_PATH\
"

CONFIG_CFLAGS=""

# Get sources in desired order
BUILD_SRCS="$(find src/Util | grep cpp)"
BUILD_SRCS="$BUILD_SRCS $(find src/Core | grep cpp)"
BUILD_SRCS="$BUILD_SRCS $(find src/Engine | grep cpp)"
BUILD_SRCS="$BUILD_SRCS $(find src/Editor | grep cpp)"
BUILD_SRCS="$BUILD_SRCS $(find src/Actors | grep cpp)"
BUILD_SRCS="$BUILD_SRCS $(find src/DeusEx | grep cpp)"
BUILD_SRCS="$BUILD_SRCS $(find src/Rune   | grep cpp)"
BUILD_SRCS="$BUILD_SRCS $(find src/HPSS   | grep cpp)"

# Compiler specific options
if [ "$BUILD_COMPILER" = "g++" ] || [ "$BUILD_COMPILER" = "clang++" ] 
then
  CONFIG_CFLAGS="-fPIC -I/usr/include -I./include $BUILD_SETTINGS -fmax-errors=10 -std=c++11 -Wno-attributes -DINSTALL_PREFIX=\\\"$BUILD_INSTALL_PATH\\\""

  if [ "$BUILD_COMPILER" = "clang++" ]
  then
    CONFIG_CFLAGS="$CONFIG_CFLAGS -Wno-unused-command-line-argument -Wno-unused-value"
  fi

  if [ "$BUILD_DEBUG" -eq 1 ]
  then
    CONFIG_CFLAGS="$CONFIG_CFLAGS -g -O0"
  else
    CONFIG_CFLAGS="$CONFIG_CFLAGS -O2"
  fi
  
  if [ "$BUILD_SYMBOLS" -eq 1 ] && [ "$BUILD_DEBUG" -eq 0 ]
  then
    CONFIG_CFLAGS="$CONFIG_CFLAGS -g"
  fi

  if [ "$BUILD_32BIT" -eq 1 ]
  then
    CONFIG_CFLAGS="$CONFIG_CFLAGS -m32"
  fi
fi

# Create makefile
echo "#################################################" > Makefile
echo "# Begin generated Makefile" >> Makefile
echo "#################################################" >> Makefile
echo "CC="$BUILD_COMPILER >> Makefile
echo "CFLAGS="$CONFIG_CFLAGS >> Makefile
echo "INSTALL_PREFIX="$BUILD_INSTALL_PATH >> Makefile
echo "VERBOSE="$BUILD_VERBOSE >> Makefile
echo >> Makefile
echo "ifeq (\"\$(VERBOSE)\", \"1\")" >> Makefile
echo "V := " >> Makefile
echo "P = @true" >> Makefile
echo "else" >> Makefile
echo "V := @" >> Makefile
echo "P = @echo" >> Makefile
echo "endif" >> Makefile
echo >> Makefile
echo "LDFLAGS=-ldl" >> Makefile
echo "BUILDDIR=build" >> Makefile
echo "SUBDIRS="$(ls src/) >> Makefile
echo "SRCDIR=src" >> Makefile
echo "SRCS="$BUILD_SRCS >> Makefile
echo "OBJDIR=\$(patsubst %, \$(BUILDDIR)/%, \$(SUBDIRS))" >> Makefile
echo "OBJS=\$(SRCS:\$(SRCDIR)/%.cpp=\$(BUILDDIR)/%.o)" >> Makefile
echo >> Makefile
echo "OUTPUT="${PWD##*/}".so" >> Makefile
echo "\$(OUTPUT): \$(OBJDIR) \$(OBJS)" >> Makefile
echo "	\$(P) \"  LD  \$(OUTPUT)\"" >> Makefile
echo "	\$(V)\$(CC) \$(CFLAGS) \$(LDFLAGS) \$(OBJS) -shared -o \$(OUTPUT)" >> Makefile
echo >> Makefile
echo "\$(BUILDDIR)/%.o: \$(SRCDIR)/%.cpp" >> Makefile
echo "	\$(P) \"  CC  \$<\"" >> Makefile
echo "	\$(V)\$(CC) \$(CFLAGS) \$(LDFLAGS) -c \$< -o \$@" >> Makefile
echo >> Makefile
echo "clean:" >> Makefile
echo "	@rm -rvf build" >> Makefile
echo >> Makefile
echo "\$(OBJDIR):" >> Makefile
echo "	mkdir -p \$@" >> Makefile
echo >> Makefile
echo ".PHONY: clean" >> Makefile
echo "default: \$(OUTPUT)" >> Makefile
echo >> Makefile
cat res/Makefile.template >> Makefile
